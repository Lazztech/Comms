<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#000000" />
    <title>App</title>
    <!-- Include the PWA manifest on your page -->
    <link rel="manifest" href="/manifest.json">
    <!-- Include the HTMX library on your page -->
    <script src='/htmx.min.js'></script>
    <!-- Include the TailwindCSS library on your page -->
    {{#if isProd}}
    <link href="/main.css" rel="stylesheet">
    {{else}}
    <script src="/tailwind3.4.3.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css" rel="stylesheet" type="text/css" />
    {{/if}}
</head>

<body>
    <div class="flex flex-col h-screen">
        <div class="flex items-center justify-between navbar bg-primary text-primary-content">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M9.348 14.652a3.75 3.75 0 0 1 0-5.304m5.304 0a3.75 3.75 0 0 1 0 5.304m-7.425 2.121a6.75 6.75 0 0 1 0-9.546m9.546 0a6.75 6.75 0 0 1 0 9.546M5.106 18.894c-3.808-3.807-3.808-9.98 0-13.788m13.788 0c3.808 3.807 3.808 9.98 0 13.788M12 12h.008v.008H12V12Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z" />
            </svg>
            <p id="status" class="text-xl justify-center">{{ message }}</p>
            <audio id="stream"></audio>
            <button class="btn" onclick="toggle()" id="mediaButton">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-6 h-6" id="playIcon">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
                </svg>
            </button>
        </div>
        <div class="flex flex-grow items-center justify-center" onmousedown="startRecording()" onmouseup="finish()">
            <button class="btn btn-circle btn-outline size-64 border-orange-500 active:bg-red-500" id="recordButton" >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24"
                    stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M12 18.75a6 6 0 0 0 6-6v-1.5m-6 7.5a6 6 0 0 1-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 0 1-3-3V4.5a3 3 0 1 1 6 0v8.25a3 3 0 0 1-3 3Z" />
                </svg>
            </button>
        </div>
    </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/hls.js@1"></script>
<script>
    const playSvg = `                
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="w-6 h-6" id="playIcon">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
            </svg>
    `;
    const pauseSvg = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="w-6 h-6" id="pauseIcon">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
            </svg>
    `;

    let stream = document.getElementById('stream');
    let mediaButton = document.getElementById('mediaButton');
    let streamSrc = '/output.m3u8';
    let hls; 
    if (Hls.isSupported()) {
        hls = hls || new Hls();
        hls.loadSource(streamSrc);
        hls.attachMedia(stream);
    } else if (stream.canPlayType('application/vnd.apple.mpegurl')) {
        stream.src = streamSrc;
    }

    function toggle() {
        if (stream.paused) {
            stream.play();
            mediaButton.innerHTML = pauseSvg;
        } else {
            stream.pause()
            mediaButton.innerHTML = playSvg;
        }
    }
</script>
<script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
<script>
    let rec = null;
    let audioStream = null;

    const recordButton = document.getElementById("recordButton");

    function startRecording() {
        let constraints = { audio: true, video: false };
        recordButton.disabled = true;
        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            const audioContext = new window.AudioContext();
            audioStream = stream;
            const input = audioContext.createMediaStreamSource(stream);
            rec = new Recorder(input, { numChannels: 1 })
            rec.record()
            document.getElementById("status").innerHTML = "Broadcasting"
        }).catch(function (err) {
            recordButton.disabled = false;
        });
    }

    function finish() {
        console.log('finish', rec, audioStream)
        document.getElementById("status").innerHTML = "Uploading..."
        recordButton.disabled = false;
        rec?.stop();
        audioStream?.getAudioTracks()[0].stop();
        rec?.exportWAV(uploadSoundData);
    }

    function uploadSoundData(blob) {
        const filename = "sound-file-" + new Date().getTime() + ".wav";
        const formData = new FormData();
        formData.append("audio_data", blob, filename);

        fetch('/broadcast', {
            method: 'POST',
            body: formData
        }).then(async result => {
            document.getElementById("status").innerHTML = "Idle";
        }).catch(error => {
            document.getElementById("status").innerHTML = "An error occurred: " + error;
        })
    }

</script>
<script>
    if (!navigator.serviceWorker.controller) {
        navigator.serviceWorker.register("/sw.js").then(function (reg) {
            console.log("Service worker has been registered for scope: " + reg.scope);
        });
    }
</script>
<script src="//cdn.jsdelivr.net/npm/eruda"></script>
<script>eruda.init();</script>
</html>